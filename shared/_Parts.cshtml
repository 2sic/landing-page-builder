@inherits ToSic.Sxc.Dnn.RazorComponent
@using System.Text.RegularExpressions
@using ToSic.Razor.Blade;

@helper SectionStyle() {
<text>style="@(Text.Has(Header.Presentation.BGImage) ? "background-image:url('"+Header.Presentation.BGImage+"?w=2560&scale=both&quality=70')" : "")"</text>
}

@helper SectionClasses(string sectionClass) {
<text>@sectionClass @Header.Presentation.TextOptimization @Header.Presentation.BackgroundColor @(Text.Has(Header.Presentation.BGImage) ? "co-backgroundimage" : "")</text>
}

@helper BackgroundDiv() {
    <div class="co-backgroundimage-overlay @Header.Presentation.BGImageEffects"></div>
}

@helper CtaList(dynamic ctas) {
    if(ctas.Count != 0) { 
        foreach (var cta in AsList(ctas)) {
            <a href="@cta.Link" class="btn btn-primary btn-lg cta" data-id="@cta.EntityId" data-moduleid="@Dnn.Module.ModuleID" data-trackingevent="cta">@cta.Label</a>
        }
    }
}

@helper HeaderCta(dynamic ctas) {
    if(ctas.Count > 0) {
        <div class="row">
            <div class="col-12 text-center">
                @CtaList(ctas)
            </div>
        </div>
    }
}

@helper VideoImageIconOrInnerContent(dynamic Data) {
    <div class="col-12 col-md-6 mb-4 @(Data.UseInnerContent != null && Data.UseInnerContent ? "sc-content-block-list cta-form" : "")"
        @Edit.ContextAttributes(Data, field: "InnerContent")>
        @if (Data.UseInnerContent != null && Data.UseInnerContent) {
            foreach (var innerContent in Data.InnerContent) {
                @ToSic.Sxc.Blocks.Render.One(innerContent);
            }
        } else {
            if (Text.Has(Data.Image) && String.IsNullOrEmpty(Data.VideoUrl)) {
                <img class="img-fluid" src="@Data.Image?w=1050&amp;scale=both&amp;mode=max&amp;quality=70" alt="@Data.Title">
            }

            if (Text.Has(Data.Icon) && String.IsNullOrEmpty(Data.Image) && String.IsNullOrEmpty(Data.VideoUrl)) {
                <div class="text-center">
                    <i class="co-icon fas @Data.Icon" aria-hidden="true"></i>
                </div>
            }

            if(Text.Has(Data.VideoUrl)) {
                var youTube = Regex.Match(Data.VideoUrl,
                    @"youtu(?:\.be|be\.com)/(?:.*v(?:/|=)|(?:.*/)?)([a-zA-Z0-9-_]+)");
                var isYouTube = youTube.Success;
                var youTubeUrl = isYouTube
                    ? "https://www.youtube.com/embed/" + youTube.Groups[1].Value + "?controls=1&fs=1&modestbranding=0&rel=0&showinfo=0&autohide=1&iv_load_policy=3&theme=dark&wmode=transparent"
                    : "";

                <a data-fancybox="fancybox-@Dnn.Module.ModuleID" class="co-video" data-width="1280" data-height="720" data-caption="@Data.Title" href="@youTubeUrl">
                    @if(Text.Has(Data.Image)) {
                    <figure>
                        <div class="overlay d-flex justify-content-center align-items-center w-100 h-100">
                            <i class="fab fa-youtube"></i>
                        </div>
                        @(Tag.Img()
                            .Class("img-fluid")
                            .Src(Data.Image + "?w=" + 1050 + "&scale=both&mode=max&quality=70")
                            .Alt(Data.Title))
                    </figure>
                    } else {
                        <div class="dnnFormMessage dnnFormWarning">Preview Image not found. Please add Preview Image or turn off Video-Lightbox</div>
                    }
                </a>
            }
        }
    </div>
}